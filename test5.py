import gmpy2

# Преобразование строки в число
def string_to_int(s):
    res = 0
    for c in s:
        res = res * 256 + ord(c)
    return res

# Преобразование числа в строку
def int_to_string(n):
    res = ""
    while n > 0:
        res += chr(n % 256)
        n //= 256
    return res[::-1]

# Расширенный алгоритм Евклида
def ext_gcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        gcd, x, y = ext_gcd(b % a, a)
    return (gcd, y - (b // a) * x, x)

# Расшифровка ElGamal
def decrypt(c, p, x):
    a = c[0]
    b = c[1]
    ax_inv = ext_gcd(pow(a, x, p), p)[1]
    m = b * ax_inv % p
    return m

# Параметры открытого ключа ElGamal
g = 676921312041214565326761275425557544784286395355423968547480366360991530225982818124993751490268451683933401113623918903558144
p = 64400718740812152429353580058080437223406664210916473816613700535488270755744299773680852017049786065692668470325192638332707017831272062855464833260014785034930886640470930749039673136760929889485620589961174076501070853673743966601950931658034147591129815568755061407536185136110837478212215039828953454430063
y = 40547995478756134459206055739374972706593476003205249065769317326722750013802717419280653270294656447901050040477123057433837205962957357515012141257393230901687905202911758311885855630862623551836363928244923182169688893396704836144874485314350115683798559493823068970083235174055708157899680975974508003910224

# Зашифрованный флаг
enc_flag = (54080220654097541425840383515051241357249747653343990057054162597234446548363798902991621443865263597303354268572370893302245221009251854167653866897764338347958151054242608354619237795108126341630300333377603417521390800442373378387349510443103351201924910776760249286669028745983944821370897113771890851261376, 23216020372245883244607227700884777810300882533701852097206228523290840950293586702958925973485423312330523156592926331183034340934912727544088380583632195025283074249122818371290418597552174838700858127393596217053478629294704166259762424673071023376288714047946959709123774187012064192009894861643241698547329)

# Найдем закрытый ключ x
# Для этого воспользуемся тем фактом, что y = g^x mod p
# Найдем x, используя метод полного перебора
x = None
for i in range(p):
    if gmpy2.powmod(g, i, p) == y:
        x = i
        break

if x is None:
    print("Failed to find the private key.")
else:
    # Расшифруем флаг
    flag_int = decrypt(enc_flag, p, x)
    flag = int_to_string(flag_int)
    print("Flag:", flag)
